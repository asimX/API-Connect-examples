---
swagger: "2.0"
info:
  x-ibm-name: "ldapoidc"
  title: "ldapoidc"
  version: "1.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/ldapoidc"
securityDefinitions:
  api-key-1:
    type: "apiKey"
    description: ""
    in: "query"
    name: "client_secret"
  clientID:
    description: "application's client_id"
    in: "query"
    name: "client_id"
    type: "apiKey"
security:
- clientID: []
paths:
  /oauth2/authorize:
    get:
      produces:
      - "text/html"
      summary: "endpoint for Authorization Code and Implicit grants"
      description: "description"
      parameters:
      - name: "response_type"
        in: "query"
        description: "request an authorization code or or access token (implicit)"
        required: true
        type: "string"
        enum:
        - "code"
        - "token"
      - name: "scope"
        in: "query"
        description: "Scope being requested"
        type: "string"
        required: true
      - name: "redirect_uri"
        in: "query"
        type: "string"
        description: "URI where user is redirected to after authorization"
        required: false
      - name: "state"
        in: "query"
        type: "string"
        description: "This string will be echoed back to application when user is\
          \ redirected"
        required: false
      responses:
        200:
          description: "An HTML form for authentication or authorization of this request."
        302:
          description: "Redirect to the clients redirect_uri containing one of the\
            \ following\n- **authorization code** for Authorization code grant\n-\
            \ **access token** for Implicity grant\n- **error** in case of errors,\
            \ such as the user has denied the request\n"
      security:
      - clientID: []
    post:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "text/html"
      summary: "submit approval to authorization code or access token"
      description: "Submit resource owners approval (or rejection) for the OAuth2\
        \ Server to issue an\nauthorization code or access token to the application.\n"
      security: []
      parameters:
      - name: "client_id"
        in: "formData"
        description: "application requesting the access code or token"
        required: true
        type: "string"
      - name: "scope"
        in: "formData"
        description: "requested scope of this authorization"
        required: true
        type: "string"
      - name: "resource-owner"
        in: "formData"
        description: "resource owners user name"
        required: true
        type: "string"
      - name: "redirect_uri"
        in: "formData"
        description: "URI the application is requesting this code or token to be redirected\
          \ to"
        required: true
        type: "string"
      - name: "original-url"
        in: "formData"
        description: "URL of the original authorization request"
        required: true
        type: "string"
      - name: "dp-state"
        in: "formData"
        description: "state information provided in the authorization form"
        required: true
        type: "string"
      - name: "dp-data"
        in: "formData"
        description: "state information provided in the authorization form"
        required: true
        type: "string"
      responses:
        200:
          description: "A consent form for oauth processing."
  /oauth2/token:
    post:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      summary: "Request Access Tokens"
      description: "This endpoint allows requesting an access token following one\
        \ of the flows below:\n- Authorization Code (exchange code for access token)\n\
        - Client Credentials (2-legged, there isnt resource owner information)\n-\
        \ Resource Owner Password Credentials (2-legged, client provides resource\
        \ owner name and password)\n- Refresh Token (exchange refresh token for a\
        \ new access code)\n\nThe table below indicates the required parameters for\
        \ each specific grant_type options.\nEmpty cells indicate a parameter is ignored\
        \ for that specific grant type.\n\nClient authentication:\n- Confidential\
        \ clients should authenticate using HTTP Basic Authentication. Alternatively,\
        \ they may post\n  their client_id and client_secret information as a formData\
        \ parameter.\n- Public clients should send their client_id as formData parameter.\n\
        \n| grant_type           | code       | client_credentials | password    |\
        \ refresh_token |\n|----------------------|------------|--------------------|-------------|---------------|\n\
        | client_id            | required*  | required*          | required*   | required*\
        \     |\n| client_secret        | required*  | required*          | required*\
        \   | required*     |\n| code                 | required   |             \
        \       |             |               |\n| redirect_uri         | required\
        \   |                    |             |               |\n| username     \
        \        |            |                    | required    |               |\n\
        | password             |            |                    | required    | \
        \              |\n| scope                |            | optional         \
        \  | optional    |               |\n| refresh_token        |            |\
        \                    |             | required      |\n\nThe implicit grant\
        \ requests, see /oauth2/authorize.\n"
      security:
      - {}
      parameters:
      - name: "grant_type"
        in: "formData"
        description: "Type of grant"
        type: "string"
        required: true
        enum:
        - "authorization_code"
        - "password"
        - "client_credentials"
        - "refresh_token"
      - name: "client_id"
        in: "formData"
        description: "Application client ID, can be provided in formData or using\
          \ HTTP Basic Authentication"
        required: false
        type: "string"
      - name: "client_secret"
        in: "formData"
        description: "Application secret, must be provided in formData or using HTTP\
          \ Basic Authentication"
        required: false
        type: "string"
      - name: "code"
        in: "formData"
        description: "Authorization code provided by the /oauth2/authorize endpoint"
        required: false
        type: "string"
      - name: "redirect_uri"
        in: "formData"
        description: "required only if the redirect_uri parameter was included in\
          \ the authorization request /oauth2/authorize; their values MUST be identical."
        required: false
        type: "string"
      - name: "username"
        in: "formData"
        type: "string"
        description: "Resource owner username"
        required: false
      - name: "password"
        in: "formData"
        type: "string"
        description: "Resource owner password"
        required: false
      - name: "scope"
        in: "formData"
        type: "string"
        description: "Scope being requested"
        required: false
      - name: "refresh_token"
        in: "formData"
        type: "string"
        description: "The refresh token that the client wants to exchange for a new\
          \ access token (refresh_token grant_type)"
        required: false
      responses:
        200:
          description: "json document containing token, etc."
          schema:
            type: "object"
        400:
          description: "json document that may contain additional details about the\
            \ failure"
x-ibm-configuration:
  testable: true
  enforced: true
  phase: "realized"
  oauth2:
    client-type: "confidential"
    scopes:
      scope1: "Description 1"
      scope2: "Description 2"
      scope3: "Description 3"
    grants:
    - "password"
    identity-extraction:
      type: "default-form"
    authentication:
      x-ibm-authentication-registry: "online-ldap"
    authorization:
      type: "authenticated"
    access-token:
      ttl: 3600
    refresh-token:
      count: 2048
      ttl: 2682000
    maximum-consent:
      ttl: 0
    revocation:
      url: ""
      tls-profile: ""
    metadata:
      metadata-url:
        url: ""
        tls-profile: ""
  assembly:
    execute:
    - operation-switch:
        title: "operation-switch"
        case:
        - operations:
          - verb: "post"
            path: "/oauth2/token"
          execute:
          - set-variable:
              title: "save oauth token to new variable"
              actions:
              - set: "oauthResults"
                value: "$(message.body)"
              version: "1.0.0"
          - xslt:
              title: "LDAP search"
              input: false
              version: "1.0.0"
              source: "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\
                \ xmlns:dp=\"http://www.datapower.com/extensions\" extension-element-prefixes=\"\
                dp\" exclude-result-prefixes=\"dp\">\n\n <!-- Contains the APIM functions\
                \ -->\n  <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"\
                \ />\n  <xsl:include href=\"local:///isp/policy/apim.setvariable-impl.xsl\"\
                \ dp:ignore-multiple=\"yes\"/>\n\n  <xsl:template match=\"/\">\n \
                \   <xsl:variable name=\"serverAddress\" select=\"'ldap.forumsys.com'\"\
                />\n    <xsl:variable name=\"portNumber\" select=\"'389'\"/>\n   \
                \ <xsl:variable name=\"bindDN\" select=\"'CN=read-only-admin,DC=example,DC=com'\"\
                />\n    <xsl:variable name=\"bindPassword\" select=\"'password'\"\
                />\n    <xsl:variable name=\"targetBaseDN\" select=\"'DC=example,DC=com'\"\
                />\n    <xsl:variable name=\"attributeName\" select=\"'CN,mail'\"\
                />\n    <xsl:variable name=\"filter\" select=\"'(uid=gauss)'\"/>\n\
                \    <xsl:variable name=\"sslProxyProfile\" select=\"''\"/>\n    <xsl:variable\
                \ name=\"ldapLBGroup\" select=\"''\"/>\n    <xsl:variable name=\"\
                ldapVersion\" select=\"'v3'\"/>\n\n    <xsl:variable name=\"ldapResults\"\
                \ select=\"dp:ldap-search($serverAddress, $portNumber, $bindDN, $bindPassword,\
                \ $targetBaseDN, $attributeName, $filter, 'sub', $sslProxyProfile,\
                \ $ldapLBGroup,$ldapVersion)\"/>\n    \n    <xsl:copy-of select=\"\
                $ldapResults\"/>\n    \n    <!-- <xsl:value-of select=\"$ldapResults/LDAP-search-results/result/attribute-value[@name='cn']\"\
                \ /> -->\n    \n  </xsl:template>\n</xsl:stylesheet>"
              description: "returns attributes in xml format"
          - xml-to-json:
              title: "xml-to-json"
              version: "1.0.0"
          - gatewayscript:
              title: "oauth + ldap body"
              version: "1.0.0"
              source: "var token = apim.getvariable(\"message.body\");\n\nvar claims\
                \ = {};\n\nclaims.cn=token[\"LDAP-search-results\"][\"result\"][\"\
                attribute-value\"][0].$;\n\nclaims.mail=token[\"LDAP-search-results\"\
                ][\"result\"][\"attribute-value\"][1].$;\n\napim.setvariable('pClaims',JSON.stringify(claims));\n\
                \napim.setvariable('message.body',{\"ldap\": claims, \"oauth\":apim.getvariable('oauthResults')});"
          - set-variable:
              title: "set-variable"
              actions:
              - value: "some value"
                set: "message.headers.asim"
              version: "1.0.0"
          - set-variable:
              title: "set-variable"
              actions:
              - value: "$(pClaims)"
                add: "privateclaims"
              version: "1.0.0"
          - jwt-generate:
              title: "jwt-generate"
              iss-claim: ""
              exp-claim: 3600
              version: "1.0.0"
              private-claims: "privateclaims"
        otherwise: []
        version: "1.0.0"
    catch: []
  gateway: "datapower-gateway"
  cors:
    enabled: true
  type: "oauth"
definitions:
  access_token_response:
    type: "object"
    additionalProperties: false
    required:
    - "token_type"
    - "access_token"
    - "expires_in"
    properties:
      token_type:
        enum:
        - "bearer"
      access_token:
        type: "string"
      expires_in:
        type: "integer"
      scope:
        type: "string"
      refresh_token:
        type: "string"
      DN:
        properties: {}
        type: "string"
consumes:
- "application/xml"
- "application/json"
